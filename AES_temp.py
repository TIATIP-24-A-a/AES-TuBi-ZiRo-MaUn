# S-Box für die Substitutionsschicht

S_BOX = [

    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5],

    [0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],

    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0],

    [0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA8, 0x51, 0xA3],

    [0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6],

    [0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C],

    [0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7],

    [0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81],

    [0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE],

    [0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32],

    [0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3],

    [0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8],

    [0x37, 0x6D, 0x8D, 0xD5, 0x4C, 0x56, 0xF4, 0xEA],

    [0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E],

    [0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F],

    [0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66],

    [0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9],

    [0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11],

    [0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9],

    [0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0x0D],

    [0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F],

    [0xB0, 0x54, 0xBB, 0x16]

]

# Inverse S-Box

INV_S_BOX = [

    [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38],

    [0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],

    [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87],

    [0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE0, 0x3B],

    [0x26, 0x49, 0x6D, 0x8B, 0x8A, 0x90, 0x88, 0x46],

    [0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0],

    [0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2],

    [0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7],

    [0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4C, 0x56, 0xF4],

    [0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25],

    [0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74],

    [0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5],

    [0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57],

    [0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98],

    [0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87],

    [0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89],

    [0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D],

    [0x0F, 0xB0, 0x54, 0xBB, 0x16]

]


# Beispiel AES-Schlüsselerweiterung (nur für 128-Bit)

def key_expansion(key):
    # Konvertieren Sie den Schlüssel in eine Matrix

    round_keys = [key]

    while len(round_keys) < 11:  # 10 Runden für 128-Bit

        temp = round_keys[-1][-4:]

        temp = sub_word(rot_word(temp))

        temp[0] ^= RCON[len(round_keys) - 1]

        round_keys.append(round_keys[-1][:-4] + temp)

    return round_keys


# Einfache Rotation eines Wortes

def rot_word(word):
    return word[1:] + word[:1]


# Substitution eines Wortes

def sub_word(word):
    return [S_BOX[b >> 4][b & 0x0F] for b in word]


# RCON für die Schlüsselerweiterung

RCON = [

    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36

]


# Verschlüsselung einer einzelnen Block

def aes_encrypt(block, key):
    round_keys = key_expansion(key)

    state = block

    state = add_round_key(state, round_keys[0])

    for round in range(1, 10):
        state = sub_bytes(state)

        state = shift_rows(state)

        state = mix_columns(state)

        state = add_round_key(state, round_keys[round])

    state = sub_bytes(state)

    state = shift_rows(state)

    state = add_round_key(state, round_keys[10])

    return state


# Einfaches Beispiel für Substitutionsoperationen und andere Schritte

def sub_bytes(state):
    return [[S_BOX[b >> 4][b & 0x0F] for b in row] for row in state]


def shift_rows(state):
    return [state[i][i:] + state[i][:i] for i in range(4)]


def mix_columns(state):
    return state  # Hier ist eine einfache Version, in einer vollständigen Implementierung würde hier ein Mix stattfinden


def add_round_key(state, round_key):
    return [[state[i][j] ^ round_key[i][j] for j in range(4)] for i in range(4)]


# Beispiel einer Eingabe

input_block = [

    [0x32, 0x88, 0x31, 0xe0],

    [0x43, 0x5a, 0x31, 0x37],

    [0xf6, 0x30, 0x98, 0x07],

    [0xa8, 0x8d, 0xa2, 0x34]

]

key = [

    [0x2b, 0x7e, 0x15, 0x16],

    [0x28, 0xae, 0xd2, 0xa6],

    [0xab, 0xf7, 0x97, 0x75],

    [0x46, 0x5f, 0x48, 0x01]

]

output = aes_encrypt(input_block, key)

print(output)


def test_rotate_word_with_words(self):
    input = ['Hallo', 'ich', 'bin', 'ein', 'Test']
    expected = ['ich', 'bin', 'ein', 'Test', 'Hallo']

    result = rot_word(input)

    self.assertEqual(expected, result)